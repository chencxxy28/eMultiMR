prob_i<-(1+exp(-x_reg_trt_i%*%gammaT))^(-1)
trt_a_i<-rbinom(1,1,prob = prob_i)
#generate a longitudinal secondary outcomes
x_i<-cbind(x_i,trt_a_i*x_i)
residual_updated_i<-as.vector(allresidual1*trt_a_i+allresidual2*(1-trt_a_i))
y_i<-(x_i%*%betaT)+residual_updated_i
y<-c(y,y_i)
x<-rbind(x,x_i)
yy_1<-c(yy_1,yy_1_i)
yy_2<-c(yy_2,yy_2_i)
prob<-c(prob,prob_i)
x_reg<-rbind(x_reg,x_reg_trt_i)
trt_a<-c(trt_a,trt_a_i)
}
#construct combined and observed outcomes
yy<-yy_1
yy[trt_a==0]<-yy_2[trt_a==0]
######propensity score model
#fit logistic regression under right model
fit<-glm(trt_a~x_reg-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_right<-fitted(fit)
#fit logistic regression under wrong model 1
fit<-glm(trt_a~x_reg[,-3]-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_wrong<-fitted(fit)
#fit logistic regression under wrong model 2
fit<-glm(trt_a~x_reg[,-c(2)]-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_wrong2<-fitted(fit)
#######regression model
#fit correct model
data.used.reg<-data.frame(x_reg[,-1],trt_a,x_reg[,-1]*trt_a)
names(data.used.reg)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
fit<-glm(yy~x1+x2+x3+trt+x1trt+x2trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
pseudo_y.obs<-predict(fit,type ="response")
newdata.trt1<-data.frame(x_reg[,-1],1,x_reg[,-1]*1)
names(newdata.trt1)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt1.right<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,-1],0,x_reg[,-1]*0)
names(newdata.trt0)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt0.right<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.right,pseudo_y.trt0.right),
trt=c(rep(1,length(pseudo_y.trt1.right)),
rep(0,length(pseudo_y.trt0.right))))
#or
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.right.all<-fit$coefficients
est.or.right.all.pool<-cbind(est.or.right.all.pool,est.or.right.all)
#fit wrong model 1
data.used.reg<-data.frame(x_reg[,c(2,4)],trt_a,x_reg[,c(2,4)]*trt_a)
names(data.used.reg)<-c("x1","x3","trt","x1trt","x3trt")
fit<-glm(yy~x1+x3+trt+x1trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
pseudo_y.obs<-predict(fit,type ="response")
newdata.trt1<-data.frame(x_reg[,c(2,4)],1,x_reg[,c(2,4)]*1)
names(newdata.trt1)<-c("x1","x3","trt","x1trt","x3trt")
pseudo_y.trt1.wrong1<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,c(2,4)],0,x_reg[,c(2,4)]*0)
names(newdata.trt0)<-c("x1","x3","trt","x1trt","x3trt")
pseudo_y.trt0.wrong1<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.wrong1,pseudo_y.trt0.wrong1),
trt=c(rep(1,length(pseudo_y.trt1.wrong1)),
rep(0,length(pseudo_y.trt0.wrong1))))
#or
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.wrong1.all<-fit$coefficients
#fit wrong model 2
data.used.reg<-data.frame(x_reg[,c(3,4)],trt_a,x_reg[,c(3,4)]*trt_a)
names(data.used.reg)<-c("x2","x3","trt","x2trt","x3trt")
fit<-glm(yy~x2+x3+trt+x2trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
newdata.trt1<-data.frame(x_reg[,c(3,4)],1,x_reg[,c(3,4)]*1)
names(newdata.trt1)<-c("x2","x3","trt","x2trt","x3trt")
pseudo_y.trt1.wrong2<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,c(3,4)],0,x_reg[,c(3,4)]*0)
names(newdata.trt0)<-c("x2","x3","trt","x2trt","x3trt")
pseudo_y.trt0.wrong2<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.wrong2,pseudo_y.trt0.wrong2),
trt=c(rep(1,length(pseudo_y.trt1.wrong2)),
rep(0,length(pseudo_y.trt0.wrong2))))
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.wrong2.all<-fit$coefficients
ar1_cor <- function(n, rho) {
exponent <- abs(matrix(1:n - 1, nrow = n, ncol = n, byrow = TRUE) -
(1:n - 1))
rho^exponent
}
n=1000
proportion<-1 # proportion of having secondary outcomes
correlation<-0.4 #correlation among secondary outcomes
variance<-1 #residual variance
time<-4 #time point
id<-rep(1:n,each=time) #subject id
etaT_1<-c(2,1,-1) #coefficients in the conditional mean model for treatment group
etaT_2<-c(1,0,-2) #coefficients in the conditional mean model for the control group
gammaT<-c(0.6,-1,-1,1) #coefficients for the treatment assignment model
betaT<-c(-1,1,2,1,1,1) #coefficients for the secondary outcomes
R_var<-ar1_cor(time,correlation) #construct the ar1 correlation structure for secondary outcomes
R_var_x<-ar1_cor(time,0.4) #construct the ar1 correlation structure for longitudinal covariates
casual_effect<-1.885925 #true casual odds ratio based on simulation
set.seed(12345)
iteration<-1000
#generate data
y<-rep()
yy_1<-rep()
yy_2<-rep()
x<-rep()
x_reg<-rep()
prob<-rep()
trt_a<-rep()
for(i in 1:n)
{
#generate observed and counterfactual outcomes
x3_i<-rep(runif(1),time=time)
x2_i<-rep(rbinom(1,1,0.5),time=time)
x_i<- cbind(1, x2_i, x3_i)
x_reg_1_i<-x_reg_2_i<-cbind(1,x2_i[1],x3_i[1])
allresidual1<-rmvnorm(1,mean=rep(0,time),sigma=R_var)
allresidual2<-rmvnorm(1,mean=rep(0,time),sigma=R_var)
residual_1_i<-allresidual1[time]
residual_2_i<-allresidual2[time]
prob_x_10<-(1+(exp(-x_reg_1_i%*%etaT_1)))^(-1)
prob_x_20<-(1+(exp(-x_reg_2_i%*%etaT_2)))^(-1)
x_10<-qnorm(1-prob_x_10)
x_20<-qnorm(1-prob_x_20)
yy_1_i<-ifelse(residual_1_i>=x_10,1,0)
yy_2_i<-ifelse(residual_2_i>=x_20,1,0)
#generate treatment assignment
u_var<-x2_i[1]+sin(x3_i[1])+0.5*rnorm(1)
x_reg_trt_i<-c(x_reg_1_i,u_var)
prob_i<-(1+exp(-x_reg_trt_i%*%gammaT))^(-1)
trt_a_i<-rbinom(1,1,prob = prob_i)
#generate a longitudinal secondary outcomes
x_i<-cbind(x_i,trt_a_i*x_i)
residual_updated_i<-as.vector(allresidual1*trt_a_i+allresidual2*(1-trt_a_i))
y_i<-(x_i%*%betaT)+residual_updated_i
y<-c(y,y_i)
x<-rbind(x,x_i)
yy_1<-c(yy_1,yy_1_i)
yy_2<-c(yy_2,yy_2_i)
prob<-c(prob,prob_i)
x_reg<-rbind(x_reg,x_reg_trt_i)
trt_a<-c(trt_a,trt_a_i)
}
{
#generate observed and counterfactual outcomes
x3_i<-rep(runif(1),time=time)
x2_i<-rep(rbinom(1,1,0.5),time=time)
x_i<- cbind(1, x2_i, x3_i)
x_reg_1_i<-x_reg_2_i<-cbind(1,x2_i[1],x3_i[1])
allresidual1<-rmvnorm(1,mean=rep(0,time),sigma=R_var)
allresidual2<-rmvnorm(1,mean=rep(0,time),sigma=R_var)
residual_1_i<-allresidual1[time]
residual_2_i<-allresidual2[time]
prob_x_10<-(1+(exp(-x_reg_1_i%*%etaT_1)))^(-1)
prob_x_20<-(1+(exp(-x_reg_2_i%*%etaT_2)))^(-1)
x_10<-qnorm(1-prob_x_10)
x_20<-qnorm(1-prob_x_20)
yy_1_i<-ifelse(residual_1_i>=x_10,1,0)
yy_2_i<-ifelse(residual_2_i>=x_20,1,0)
#generate treatment assignment
u_var<-x2_i[1]+sin(x3_i[1])+0.5*rnorm(1)
x_reg_trt_i<-c(x_reg_1_i,u_var)
prob_i<-(1+exp(-x_reg_trt_i%*%gammaT))^(-1)
trt_a_i<-rbinom(1,1,prob = prob_i)
#generate a longitudinal secondary outcomes
x_i<-cbind(x_i,trt_a_i*x_i)
residual_updated_i<-as.vector(allresidual1*trt_a_i+allresidual2*(1-trt_a_i))
y_i<-(x_i%*%betaT)+residual_updated_i
y<-c(y,y_i)
x<-rbind(x,x_i)
yy_1<-c(yy_1,yy_1_i)
yy_2<-c(yy_2,yy_2_i)
prob<-c(prob,prob_i)
x_reg<-rbind(x_reg,x_reg_trt_i)
trt_a<-c(trt_a,trt_a_i)
}
#construct combined and observed outcomes
yy<-yy_1
yy[trt_a==0]<-yy_2[trt_a==0]
######propensity score model
#fit logistic regression under right model
fit<-glm(trt_a~x_reg-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_right<-fitted(fit)
#fit logistic regression under wrong model 1
fit<-glm(trt_a~x_reg[,-3]-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_wrong<-fitted(fit)
#fit logistic regression under wrong model 2
fit<-glm(trt_a~x_reg[,-c(2)]-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_wrong2<-fitted(fit)
#######regression model
#fit correct model
data.used.reg<-data.frame(x_reg[,-1],trt_a,x_reg[,-1]*trt_a)
names(data.used.reg)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
fit<-glm(yy~x1+x2+x3+trt+x1trt+x2trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
pseudo_y.obs<-predict(fit,type ="response")
newdata.trt1<-data.frame(x_reg[,-1],1,x_reg[,-1]*1)
names(newdata.trt1)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt1.right<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,-1],0,x_reg[,-1]*0)
names(newdata.trt0)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt0.right<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.right,pseudo_y.trt0.right),
trt=c(rep(1,length(pseudo_y.trt1.right)),
rep(0,length(pseudo_y.trt0.right))))
#or
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.right.all<-fit$coefficients
#fit wrong model 1
data.used.reg<-data.frame(x_reg[,c(2,4)],trt_a,x_reg[,c(2,4)]*trt_a)
names(data.used.reg)<-c("x1","x3","trt","x1trt","x3trt")
fit<-glm(yy~x1+x3+trt+x1trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
pseudo_y.obs<-predict(fit,type ="response")
newdata.trt1<-data.frame(x_reg[,c(2,4)],1,x_reg[,c(2,4)]*1)
names(newdata.trt1)<-c("x1","x3","trt","x1trt","x3trt")
pseudo_y.trt1.wrong1<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,c(2,4)],0,x_reg[,c(2,4)]*0)
names(newdata.trt0)<-c("x1","x3","trt","x1trt","x3trt")
pseudo_y.trt0.wrong1<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.wrong1,pseudo_y.trt0.wrong1),
trt=c(rep(1,length(pseudo_y.trt1.wrong1)),
rep(0,length(pseudo_y.trt0.wrong1))))
#or
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.wrong1.all<-fit$coefficients
#fit wrong model 2
data.used.reg<-data.frame(x_reg[,c(3,4)],trt_a,x_reg[,c(3,4)]*trt_a)
names(data.used.reg)<-c("x2","x3","trt","x2trt","x3trt")
fit<-glm(yy~x2+x3+trt+x2trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
newdata.trt1<-data.frame(x_reg[,c(3,4)],1,x_reg[,c(3,4)]*1)
names(newdata.trt1)<-c("x2","x3","trt","x2trt","x3trt")
pseudo_y.trt1.wrong2<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,c(3,4)],0,x_reg[,c(3,4)]*0)
names(newdata.trt0)<-c("x2","x3","trt","x2trt","x3trt")
pseudo_y.trt0.wrong2<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.wrong2,pseudo_y.trt0.wrong2),
trt=c(rep(1,length(pseudo_y.trt1.wrong2)),
rep(0,length(pseudo_y.trt0.wrong2))))
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.wrong2.all<-fit$coefficients
eta_pi_initial
######propensity score model
#fit logistic regression under right model
fit<-glm(trt_a~x_reg-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_right<-fitted(fit)
#fit logistic regression under wrong model 1
fit<-glm(trt_a~x_reg[,-3]-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_wrong<-fitted(fit)
#fit logistic regression under wrong model 2
fit<-glm(trt_a~x_reg[,-c(2)]-1,family = binomial(link = "logit"))
eta_pi_initial<-fit$coefficients
prob_fitted_wrong2<-fitted(fit)
eta_pi_initial
#conventional iptw
iptw.binary<-function(prob_fit,trt_ind,main_outcome)
{
trt_a<-trt_ind
yy<-main_outcome
n<-length(yy)
iptw_weight<-prob_fit
iptw_weight[trt_a==0]<-(1-prob_fit)[trt_a==0]
score_function<-function (eta)
{
sf=rep()
for (i in 1:n)
{
x_i=as.matrix(c(1,trt_a[i]),ncol=1)
mu_i=as.vector(1/(1+exp(-t(x_i)%*%eta)))
sf_i=x_i*(yy[i]-mu_i)/iptw_weight[i]
sf=cbind(sf,sf_i)
}
sf
}
nf<-function (eta)
{
score_function(eta)%*%rep(1,n)
}
fit<-glm(yy~trt_a,family = binomial(link = "logit"))
eta_initial<-fit$coefficients
eta<-multiroot(f = nf, start = as.vector(eta_initial))$root
eta
}
eta_iptw<-rep()
#construct iptw weight:right
eta<-iptw.binary(prob_fit=prob_fitted_right,trt_ind=trt_a,main_outcome=yy)
eta_iptw<-cbind(eta_iptw,eta)
#construct iptw weight:wrong1
eta<-iptw.binary(prob_fit=prob_fitted_wrong,trt_ind=trt_a,main_outcome=yy)
eta_iptw<-cbind(eta_iptw,eta)
#construct iptw weight:wrong2
eta<-iptw.binary(prob_fit=prob_fitted_wrong2,trt_ind=trt_a,main_outcome=yy)
eta_iptw<-cbind(eta_iptw,eta)
eta_iptw
eta_iptw[2,]-casual_effect
eta_iptw<-rep()
#construct iptw weight:right
eta<-iptw.binary(prob_fit=prob_fitted_right,trt_ind=trt_a,main_outcome=yy)
eta_iptw<-cbind(eta_iptw,eta)
#construct iptw weight:wrong1
eta<-iptw.binary(prob_fit=prob_fitted_wrong,trt_ind=trt_a,main_outcome=yy)
eta_iptw<-cbind(eta_iptw,eta)
#construct iptw weight:wrong2
eta<-iptw.binary(prob_fit=prob_fitted_wrong2,trt_ind=trt_a,main_outcome=yy)
eta_iptw<-cbind(eta_iptw,eta)
eta_iptw[2,]-casual_effect
est.or.right.all
est_cm<-cbind(est.or.right.all,est.or.wrong1.all,est.or.wrong2.all)
est_cm[2,]
est_cm[2,]-casual_effect
casual_effect
#estimating fct
est.fct.or<-function (eta,pseudo_y,trt=1)
{
yy<-pseudo_y
sf=rep()
for (i in 1:n)
{
x_i=as.matrix(c(1,trt),ncol=1)
mu_i=as.vector(1/(1+exp(-t(x_i)%*%eta)))
sf_i=x_i*(yy[i]-mu_i)
sf=cbind(sf,sf_i)
}
sf
}
#estimating fct for or: trt group
est.or.fct.trt11<-est.fct.or(eta=est.or.wrong1.all,pseudo_y=pseudo_y.trt1.wrong1,trt=1)
est.or.fct.trt12<-est.fct.or(eta=est.or.right.all,pseudo_y=pseudo_y.trt1.right,trt=1)
#estimating fct for or: control grp
est.or.fct.trt01<-est.fct.or(eta=est.or.wrong1.all,pseudo_y=pseudo_y.trt0.wrong1,trt=0)
est.or.fct.trt02<-est.fct.or(eta=est.or.right.all,pseudo_y=pseudo_y.trt0.right,trt=0)
#calculate multiple robust propensity score with or given one right models for both iptw and or
#multiple propensity score with or
multir.propensity.or<-function(prob_fit1=prob_fitted_wrong2,prob_fit2=prob_fitted_wrong,
or_fit11=est.or.fct.trt11,or_fit12=est.or.fct.trt12,
or_fit01=est.or.fct.trt01,or_fit02=est.or.fct.trt02,
trt_ind=trt_a)
{
trt_a<-trt_ind
#iptw for trt
prob_fitted_right_mean<-mean(prob_fit1)
prob_fitted_wrong_mean<-mean(prob_fit2)
#or for trt
or_fit11.mean<-apply(or_fit11,1,mean)
or_fit12.mean<-apply(or_fit12,1,mean)
ZZ_trt_propensity<-rbind((as.vector(prob_fit1)-as.vector(prob_fitted_right_mean))[trt_a==1],
(as.vector(prob_fit2)-as.vector(prob_fitted_wrong_mean))[trt_a==1],
((or_fit11)-(or_fit11.mean))[,trt_a==1],
((or_fit12)-(or_fit12.mean))[,trt_a==1]
)
lambda_prop_trt<-lambda_propensity(ZZ_trt_propensity)
num_trt<-sum(trt_a==1)
Prop_trt<-apply(ZZ_trt_propensity,2,function(xx){1/(1+t(matrix(lambda_prop_trt,ncol=1))%*%xx)/num_trt})
#iptw for control
prob_fitted_right_control<-1-prob_fit1
prob_fitted_wrong_control<-1-prob_fit2
prob_fitted_right_mean_control<-mean(prob_fitted_right_control)
prob_fitted_wrong_mean_control<-mean(prob_fitted_wrong_control)
#or for control
or_fit01.mean<-apply(or_fit01,1,mean)
or_fit02.mean<-apply(or_fit02,1,mean)
ZZ_control_propensity<-rbind((as.vector(prob_fitted_right_control)-as.vector(prob_fitted_right_mean_control))[trt_a==0],
(as.vector(prob_fitted_wrong_control)-as.vector(prob_fitted_wrong_mean_control))[trt_a==0],
((or_fit01)-(or_fit01.mean))[,trt_a==0],
((or_fit02)-(or_fit02.mean))[,trt_a==0]
)
lambda_prop_control<-lambda_propensity(ZZ_control_propensity)
num_control<-sum(trt_a==0)
Prop_control<-apply(ZZ_control_propensity,2,function(xx){1/(1+t(matrix(lambda_prop_control,ncol=1))%*%xx)/num_control})
#combine propensity
Prop_multir<-rep()
Prop_multir[trt_a==1]<-Prop_trt
Prop_multir[trt_a==0]<-Prop_control
Prop_multir
}
Prop_multir_rr<-multir.propensity.or(prob_fit1=prob_fitted_right,prob_fit2=prob_fitted_wrong,
or_fit11=est.or.fct.trt11,or_fit12=est.or.fct.trt12,
or_fit01=est.or.fct.trt01,or_fit02=est.or.fct.trt02,
trt_ind=trt_a)
#estimating fct
est.fct.or<-function (eta,pseudo_y,trt=1)
{
yy<-pseudo_y
sf=rep()
for (i in 1:n)
{
x_i=as.matrix(c(1,trt),ncol=1)
mu_i=as.vector(1/(1+exp(-t(x_i)%*%eta)))
sf_i=x_i*(yy[i]-mu_i)
sf=cbind(sf,sf_i)
}
sf
}
#estimating fct for or: trt group
est.or.fct.trt11<-est.fct.or(eta=est.or.wrong1.all,pseudo_y=pseudo_y.trt1.wrong1,trt=1)
est.or.fct.trt12<-est.fct.or(eta=est.or.right.all,pseudo_y=pseudo_y.trt1.right,trt=1)
#estimating fct for or: control grp
est.or.fct.trt01<-est.fct.or(eta=est.or.wrong1.all,pseudo_y=pseudo_y.trt0.wrong1,trt=0)
est.or.fct.trt02<-est.fct.or(eta=est.or.right.all,pseudo_y=pseudo_y.trt0.right,trt=0)
#calculate multiple robust propensity score with or given one right models for both iptw and or
##first derivative of -log EL
R1der<-function(lambda,ZZ)
{
apply(ZZ,2,function(xx)
{as.matrix(xx,ncol=1)/as.vector((1+t(lambda)%*%as.matrix(xx,ncol=1)))})%*%rep(1,ncol(ZZ))
}
##second derivative of -log EL
R2der<-function(lambda,ZZ)
{
r2der<-0
for(i in 1:ncol(ZZ))
{
r2der_i<--as.matrix(ZZ[,i],ncol=1)%*%t(as.matrix(ZZ[,i],ncol=1))/as.vector(1+t(lambda)%*%as.matrix(ZZ[,i],ncol=1))^2
r2der<-r2der+r2der_i
}
r2der
}
##-log EL
R0der<-function(lambda,ZZ)
{
apply(ZZ,2, function (xx) {log(as.vector(1+t(lambda)%*%as.matrix(xx,ncol=1)))})%*%rep(1,ncol(ZZ))
}
#lambda for propensity scores
lambda_propensity<-function(ZZ)
{
ZZ<-ZZ
dim(ZZ)
apply(ZZ,1,mean)
gamma<-1
c<-0
lambda<-rep(0,nrow(ZZ))
tol<-10e-8
Delta_old<-0
repeat{
rl<-R1der(lambda,ZZ)
rll<-R2der(lambda,ZZ)
Delta<--ginv(rll)%*%rl
if(mean(abs(Delta))<tol | sum(Delta-Delta_old)==0)
{break}else{
repeat{
mm<-0
repeat{
delta<-gamma*Delta
index_1<-apply(ZZ,2,function (xx)
{ifelse(1+t(lambda+delta)%*%as.matrix(xx,ncol=1)<=0,1,0)}
)
if (sum(index_1)>0)
{gamma<-gamma/2
mm<-mm+1}else{break}}
index_2<-ifelse(R0der(lambda+delta,ZZ)-R0der(lambda,ZZ)<0,1,0)
if (index_2==1)
{gamma<-gamma/2}else{break}
}
Delta_old<-Delta
}
lambda<-lambda+delta
c<-c+1
gamma<-(c)^(-0.5)
}
lambda
}
#multiple propensity score with or
multir.propensity.or<-function(prob_fit1=prob_fitted_wrong2,prob_fit2=prob_fitted_wrong,
or_fit11=est.or.fct.trt11,or_fit12=est.or.fct.trt12,
or_fit01=est.or.fct.trt01,or_fit02=est.or.fct.trt02,
trt_ind=trt_a)
{
trt_a<-trt_ind
#iptw for trt
prob_fitted_right_mean<-mean(prob_fit1)
prob_fitted_wrong_mean<-mean(prob_fit2)
#or for trt
or_fit11.mean<-apply(or_fit11,1,mean)
or_fit12.mean<-apply(or_fit12,1,mean)
ZZ_trt_propensity<-rbind((as.vector(prob_fit1)-as.vector(prob_fitted_right_mean))[trt_a==1],
(as.vector(prob_fit2)-as.vector(prob_fitted_wrong_mean))[trt_a==1],
((or_fit11)-(or_fit11.mean))[,trt_a==1],
((or_fit12)-(or_fit12.mean))[,trt_a==1]
)
lambda_prop_trt<-lambda_propensity(ZZ_trt_propensity)
num_trt<-sum(trt_a==1)
Prop_trt<-apply(ZZ_trt_propensity,2,function(xx){1/(1+t(matrix(lambda_prop_trt,ncol=1))%*%xx)/num_trt})
#iptw for control
prob_fitted_right_control<-1-prob_fit1
prob_fitted_wrong_control<-1-prob_fit2
prob_fitted_right_mean_control<-mean(prob_fitted_right_control)
prob_fitted_wrong_mean_control<-mean(prob_fitted_wrong_control)
#or for control
or_fit01.mean<-apply(or_fit01,1,mean)
or_fit02.mean<-apply(or_fit02,1,mean)
ZZ_control_propensity<-rbind((as.vector(prob_fitted_right_control)-as.vector(prob_fitted_right_mean_control))[trt_a==0],
(as.vector(prob_fitted_wrong_control)-as.vector(prob_fitted_wrong_mean_control))[trt_a==0],
((or_fit01)-(or_fit01.mean))[,trt_a==0],
((or_fit02)-(or_fit02.mean))[,trt_a==0]
)
lambda_prop_control<-lambda_propensity(ZZ_control_propensity)
num_control<-sum(trt_a==0)
Prop_control<-apply(ZZ_control_propensity,2,function(xx){1/(1+t(matrix(lambda_prop_control,ncol=1))%*%xx)/num_control})
#combine propensity
Prop_multir<-rep()
Prop_multir[trt_a==1]<-Prop_trt
Prop_multir[trt_a==0]<-Prop_control
Prop_multir
}
Prop_multir_rr<-multir.propensity.or(prob_fit1=prob_fitted_right,prob_fit2=prob_fitted_wrong,
or_fit11=est.or.fct.trt11,or_fit12=est.or.fct.trt12,
or_fit01=est.or.fct.trt01,or_fit02=est.or.fct.trt02,
trt_ind=trt_a)
trt_a
