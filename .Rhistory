der<-x*as.vector(v)
mu<-as.vector(pi)
}
else if (dist=="poisson")
{
v<-exp(reg)
der<-x*as.vector(exp(reg))
mu<-as.vector(exp(reg))
}
list(v=v,der=der,mu=mu)
}
##based on adjusted empirical likelihood
wgeef<-function(beta,adata,r=r,id=id,dist=dist,time=time,m_1=m_1)
{ #full wgee
y<-adata[,1]
x<-adata[,-1]
n<-length(unique(id))
A<-diag(1,time,time)
# R1<-diag(1,time,time)
# R2<-matrix(1,nrow=time,ncol=time)-diag(1,time,time)
# R3<-R2
# R3[1,4]<- R3[4,1]<- 0
# R4<-diag(0,time,time)
# R4[time,time]<-R4[1,1]<-1
R1<-R2<-R3<-R4<-diag(0,time)
R1[1,1]<-1
R2[2,2]<-1
R3[3,3]<-1
R4[4,4]<-1
W<-diag(1,time,time)
V<-v(x,beta,dist)
wgeef<-rep()
dwgeef<-rep()
sum_dwgee<-0
#z.col<-ncol(z)
y[which(is.na(y))]<-0
x[which(is.na(x))]<-0
for (i in 1:m_1)
{
index_obs<-which(r[((i-1)*time+1):(i*time)]==1)
AA<-(A*V$v[((i-1)*time+1):(i*time)]^(-0.5))[index_obs,index_obs]
WW<-W*r[((i-1)*time+1):(i*time)]
WW_obs<-WW[index_obs,index_obs]
R_obs1<-R1[index_obs,index_obs]
R_obs2<-R2[index_obs,index_obs]
R_obs3<-R3[index_obs,index_obs]
R_obs4<-R4[index_obs,index_obs]
e<-(y[((i-1)*time+1):(i*time)]-V$mu[((i-1)*time+1):(i*time)])
e_obs<-e[index_obs]
if (length(e_obs)==1)
{
wgeei1<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs1)*AA*WW_obs*e_obs)
wgeei2<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs2)*AA*WW_obs*e_obs)
wgeei3<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs3)*AA*WW_obs*e_obs)
wgeei4<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs4)*AA*WW_obs*e_obs)
dwgeei1<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs1)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
dwgeei2<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs2)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
dwgeei3<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs3)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
dwgeei4<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs4)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
wgeei134<-rbind(wgeei1,wgeei2,wgeei3,wgeei4)
dwgeei134<-rbind(dwgeei1,dwgeei2,dwgeei3,dwgeei4)
}else
{
wgeei1<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs1)%*%AA)%*%WW_obs%*%e_obs
wgeei2<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs2)%*%AA)%*%WW_obs%*%e_obs
wgeei3<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs3)%*%AA)%*%WW_obs%*%e_obs
wgeei4<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs4)%*%AA)%*%WW_obs%*%e_obs
dwgeei1<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs1)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
dwgeei2<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs2)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
dwgeei3<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs3)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
dwgeei4<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs4)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
wgeei134<-rbind(wgeei1,wgeei2,wgeei3,wgeei4)
dwgeei134<-rbind(dwgeei1,dwgeei2,dwgeei3,dwgeei4)
}
wgeef<-cbind(wgeef,wgeei134)
dwgeef<-cbind(dwgeef,dwgeei134)
sum_dwgee<-sum_dwgee+dwgeei134
}
wgeef_adjusted<-cbind(wgeef,-max(log(m_1)/2,1)*apply(wgeef,1,mean))
#l_index<-rep(1:time,time=n)
dwgeef_adjusted<-cbind(dwgeef,-max(log(m_1)/2,1)*sum_dwgee/m_1)
return(cbind(wgeef_adjusted,dwgeef_adjusted))
}
##based on empirical likelihood
wgeef_oracle<-function(beta,adata,r=r,id=id,dist=dist,time=time,m_1=m_1)
{ #full wgee
y<-adata[,1]
x<-adata[,-1]
n<-length(unique(id))
A<-diag(1,time,time)
# R1<-diag(1,time,time)
# R2<-matrix(1,nrow=time,ncol=time)-diag(1,time,time)
# R3<-R2
# R3[1,4]<-R3[4,1]<-0
# R4<-diag(0,time,time)
# R4[time,time]<-R4[1,1]<-1
R1<-R2<-R3<-R4<-diag(0,time)
R1[1,1]<-1
R2[2,2]<-1
R3[3,3]<-1
R4[4,4]<-1
W<-diag(1,time,time)
V<-v(x,beta,dist)
wgeef<-rep()
dwgeef<-rep()
sum_dwgee<-0
#z.col<-ncol(z)
y[which(is.na(y))]<-0
x[which(is.na(x))]<-0
for (i in 1:m_1)
{
index_obs<-which(r[((i-1)*time+1):(i*time)]==1)
AA<-(A*V$v[((i-1)*time+1):(i*time)]^(-0.5))[index_obs,index_obs]
WW<-W*r[((i-1)*time+1):(i*time)]
WW_obs<-WW[index_obs,index_obs]
R_obs1<-R1[index_obs,index_obs]
R_obs2<-R2[index_obs,index_obs]
R_obs3<-R3[index_obs,index_obs]
R_obs4<-R4[index_obs,index_obs]
e<-(y[((i-1)*time+1):(i*time)]-V$mu[((i-1)*time+1):(i*time)])
e_obs<-e[index_obs]
if (length(e_obs)==1)
{
wgeei1<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs1)*AA*WW_obs*e_obs)
wgeei2<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs2)*AA*WW_obs*e_obs)
wgeei3<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs3)*AA*WW_obs*e_obs)
wgeei4<-(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs4)*AA*WW_obs*e_obs)
dwgeei1<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs1)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
dwgeei2<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs2)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
dwgeei3<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs3)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
dwgeei4<--(matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))%*%(AA*(R_obs4)*AA*WW_obs*t((matrix(V$der[((i-1)*time+1):(i*time),][index_obs,],ncol=1))))
wgeei134<-rbind(wgeei1,wgeei2,wgeei3,wgeei4)
dwgeei134<-rbind(dwgeei1,dwgeei2,dwgeei3,dwgeei4)
}else
{
wgeei1<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs1)%*%AA)%*%WW_obs%*%e_obs
wgeei2<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs2)%*%AA)%*%WW_obs%*%e_obs
wgeei3<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs3)%*%AA)%*%WW_obs%*%e_obs
wgeei4<-t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs4)%*%AA)%*%WW_obs%*%e_obs
dwgeei1<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs1)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
dwgeei2<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs2)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
dwgeei3<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs3)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
dwgeei4<--t(V$der[((i-1)*time+1):(i*time),][index_obs,])%*%(AA%*%(R_obs4)%*%AA)%*%WW_obs%*%(V$der[((i-1)*time+1):(i*time),][index_obs,])
wgeei134<-rbind(wgeei1,wgeei2,wgeei3,wgeei4)
dwgeei134<-rbind(dwgeei1,dwgeei2,dwgeei3,dwgeei4)
}
wgeef<-cbind(wgeef,wgeei134)
dwgeef<-cbind(dwgeef,dwgeei134)
#sum_dwgee<-sum_dwgee+dwgeei12
}
#wgeef_adjusted<-cbind(wgeef,-max(log(n)/2,1)*apply(wgeef,1,mean))
#l_index<-rep(1:time,time=n)
#dwgeef_adjusted<-cbind(dwgeef,-max(log(n)/2,1)*sum_dwgee/n)
return(cbind(wgeef,dwgeef))
}
#information borrow
MinBo.one<-function(s.outcome,cov.mat,n,proportion,time,r,id,dist="gaussian")
{
y<-s.outcome
x<-cov.mat
adata<-cbind(y,x)[1:(proportion*n*time),]
m_1<-n*proportion
dim(adata)
##get initial values for the algorithm
fit<-geese(y~x-1,id=id)
beta_initial<-fit$beta
#function to find lambda, given beta and an
lambda_find<-function(beta)
{
ZZ<-wgeef(beta=beta,adata,r=r,id=id,dist=dist,time=time,m_1=m_1)[,1:(m_1+1)]
dim(ZZ)
apply(ZZ,1,mean)
gamma<-1
c<-0
lambda<-rep(0,nrow(ZZ))
tol<-10e-8
Delta_old<-0
repeat{
rl<-R1der(lambda,ZZ)
rll<-R2der(lambda,ZZ)
Delta<--ginv(rll)%*%rl
if(mean(abs(Delta))<tol | mean(Delta-Delta_old)==0)
{break}else{
repeat{
mm<-0
repeat{
delta<-gamma*Delta
index_1<-apply(ZZ,2,function (xx)
{ifelse(1+t(lambda+delta)%*%as.matrix(xx,ncol=1)<=0,1,0)}
)
if (sum(index_1)>0)
{gamma<-gamma/2
mm<-mm+1}else{break}}
index_2<-ifelse(R0der(lambda+delta,ZZ)-R0der(lambda,ZZ)<0,1,0)
if (index_2==1)
{gamma<-gamma/2}else{break}
}
Delta_old<-Delta
}
lambda<-lambda+delta
c<-c+1
gamma<-(c)^(-0.5)
}
lambda
}
####multiroot_method
beta_ee<-function(beta)
{
total<-wgeef(beta=beta,adata,r=r,id=id,dist=dist,time=time,m_1=m_1)
ZZ<-total[,1:(m_1+1)]
ZZ_d<-total[,(m_1+2):((ncol(x)+1)*m_1+1+ncol(x))]
beta_ee<-0
lambda=lambda_find(beta)
for (i in 1:(m_1+1))
{
scaler<-(1/(1+t(matrix(lambda,ncol=1))%*%ZZ[,i]))
ee_i<-matrix((t(ZZ_d[,((i-1)*ncol(x)+1):(i*ncol(x))])%*%matrix(lambda,ncol=1)),nrow=ncol(x))*as.vector(scaler)
beta_ee<-beta_ee+ee_i
}
beta_ee
}
##get estimated beta
beta<-multiroot(f = beta_ee, start = as.vector(beta_initial))$root
lambda<-lambda_find(beta)
#calculate P based on oracle
total<-wgeef_oracle(beta=beta,adata,r=r,id=id,dist=dist,time=time,m_1=m_1)
ZZ<-total[,1:(m_1)]
ZZ_der<-total[,(m_1+1):((ncol(x)+1)*m_1)]
Prop_scores<-apply(ZZ,2,function(xx){1/(1+t(matrix(lambda,ncol=1))%*%xx)/m_1})
Prop_scores<-c(Prop_scores*m_1,rep(1,(1-proportion)*n))
Prop_scores
}
#multiple robust estimator+information borrowing
multir.ib.est<-function(Prop_multir=Prop_multir,Prop_scores=Prop_scores,trt_ind=trt_a,main_outcome=yy)
{
n=length(main_outcome)
trt_a<-trt_ind
score_function_en<-function (eta)
{
sf=rep()
for (i in 1:n)
{
x_i=as.matrix(c(1,trt_a[i]),ncol=1)
mu_i=as.vector(1/(1+exp(-t(x_i)%*%eta)))
sf_i=x_i*(yy[i]-mu_i)*Prop_scores[i]*Prop_multir[i]
sf=cbind(sf,sf_i)
}
sf
}
nf_en<-function (eta)
{
score_function_en(eta)%*%rep(1,n)
}
fit<-glm(yy~trt_a,family = binomial(link = "logit"))
eta_initial<-fit$coefficients
eta_en1_multir<-multiroot(f = nf_en, start = as.vector(eta_initial))$root
eta_en1_multir
}
#MinBo: one secondary outcome situation
r<-rep(1,nrow(x))
Prop_scores<-MinBo.one(s.outcome=y,cov.mat=x,n=n,proportion=proportion,time=time,r=r,id=id,dist="gaussian")
summary(Prop_scores)
eta_emultir_ww<-multir.ib.est(Prop_multir=Prop_multir_ww,Prop_scores=Prop_scores,trt_ind=trt_a,main_outcome=yy)
eta_emultir_ww[2]-casual_effect
est_all<-c(eta_emultir_ww[2],eta_multir_ww[2],est.dr.ww[2],est_cm[2,],eta_iptw[2,])
est_all-casual_effect
est_all
names(est_all)
names(est_all)<-c(eMultiR_ww,MultiR_ww,DR_ww,
CM_r,CM_w1,CM_w2,
IPTW_r,IPTW_w1,IPTW_w2)
names(est_all)<-c("eMultiR_ww","MultiR_ww","DR_ww",
"CM_r","CM_w1","CM_w2",
"IPTW_r","IPTW_w1","IPTW_w2")
est_all
saveRDS(est_all,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/research_mingwang/causal/package_results/est_all.rds")
est_all<-readRDS("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/research_mingwang/causal/package_results/est_all.rds")
est_all-casual_effect
round(est_all-casual_effect,3)
data.bar<-data.frame(bias=round(est_all-casual_effect,3))
data.bar
data.bar<-data.frame(bias=round(est_all-casual_effect,3),method=names(est_all))
p<-ggplot(data=data.bar, aes(x=dose, y=bias)) +
geom_bar(stat="identity")
data.bar<-data.frame(Bias=round(est_all-casual_effect,3),Method=names(est_all))
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity")
library(ggplot2)
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity")
p
data.bar<-data.frame(Bias=abs(round(est_all-casual_effect,3)),
Method=names(est_all))
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity")
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=1.6, color="white", size=3.5)+
theme_minimal()
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias), vjust=1.6, color="white", size=3.5)+
theme_minimal()
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias), vjust=0.5, color="white", size=3.5)+
theme_minimal()
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias), hjust=1,vjust=1.6, color="white", size=3.5)+
theme_minimal()
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias),vjust=1.6, color="white", size=3.5)+
theme_minimal()
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias),vjust=1.6, color="white", size=3.5)+
theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias),vjust=1.6, color="white", size=3.5)+
theme(axis.text.x=element_text(angle=45,hjust=1,vjust=0.5))
p
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias),vjust=1.6, color="white", size=3.5)+
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=0.5))
p
R_var
#######regression model
#fit correct model
data.used.reg<-data.frame(x_reg[,-1],trt_a,x_reg[,-1]*trt_a)
names(data.used.reg)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
fit<-glm(yy~x1+x2+x3+trt+x1trt+x2trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
pseudo_y.obs<-predict(fit,type ="response")
newdata.trt1<-data.frame(x_reg[,-1],1,x_reg[,-1]*1)
names(newdata.trt1)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt1.right<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,-1],0,x_reg[,-1]*0)
names(newdata.trt0)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt0.right<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.right,pseudo_y.trt0.right),
trt=c(rep(1,length(pseudo_y.trt1.right)),
rep(0,length(pseudo_y.trt0.right))))
#or
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.right.all<-fit$coefficients
#est.or.right.all.pool<-cbind(est.or.right.all.pool,est.or.right.all)
#fit wrong model 2
data.used.reg<-data.frame(x_reg[,c(3,4)],trt_a,x_reg[,c(3,4)]*trt_a)
names(data.used.reg)<-c("x2","x3","trt","x2trt","x3trt")
fit<-glm(yy~x2+x3+trt+x2trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
newdata.trt1<-data.frame(x_reg[,c(3,4)],1,x_reg[,c(3,4)]*1)
names(newdata.trt1)<-c("x2","x3","trt","x2trt","x3trt")
pseudo_y.trt1.wrong2<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,c(3,4)],0,x_reg[,c(3,4)]*0)
names(newdata.trt0)<-c("x2","x3","trt","x2trt","x3trt")
pseudo_y.trt0.wrong2<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.wrong2,pseudo_y.trt0.wrong2),
trt=c(rep(1,length(pseudo_y.trt1.wrong2)),
rep(0,length(pseudo_y.trt0.wrong2))))
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.wrong2.all<-fit$coefficients
#est.or.wrong2.all.pool<-cbind(est.or.wrong2.all.pool,est.or.wrong2.all)
#fit wrong model 1
data.used.reg<-data.frame(x_reg[,c(2,4)],trt_a,x_reg[,c(2,4)]*trt_a)
names(data.used.reg)<-c("x1","x3","trt","x1trt","x3trt")
fit<-glm(yy~x1+x3+trt+x1trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
pseudo_y.obs<-predict(fit,type ="response")
newdata.trt1<-data.frame(x_reg[,c(2,4)],1,x_reg[,c(2,4)]*1)
names(newdata.trt1)<-c("x1","x3","trt","x1trt","x3trt")
pseudo_y.trt1.wrong1<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,c(2,4)],0,x_reg[,c(2,4)]*0)
names(newdata.trt0)<-c("x1","x3","trt","x1trt","x3trt")
pseudo_y.trt0.wrong1<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.wrong1,pseudo_y.trt0.wrong1),
trt=c(rep(1,length(pseudo_y.trt1.wrong1)),
rep(0,length(pseudo_y.trt0.wrong1))))
#or
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
est.or.wrong1.all<-fit$coefficients
#est.or.wrong1.all.pool<-cbind(est.or.wrong1.all.pool,est.or.wrong1.all)
est_cm<-cbind(est.or.right.all,est.or.wrong1.all,est.or.wrong2.all)
est_cm[2,]-casual_effect
#dr estimation
#wor wiptw
est.dr.ww<-dr.est(prob_fit=prob_fitted_wrong,trt_ind=trt_a,main_outcome=yy, pseudo_outcome_obs=pseudo_y.obs, pseudo_outcome_comb=data.impute$pseudo_y, pseudo_trt=data.impute$trt
)
#dr estimation
#wor wiptw
est.dr.ww<-dr.est(prob_fit=prob_fitted_wrong,trt_ind=trt_a,main_outcome=yy, pseudo_outcome_obs=pseudo_y.obs, pseudo_outcome_comb=data.impute$pseudo_y, pseudo_trt=data.impute$trt
)
est.dr.ww[2]-casual_effect
est_all<-c(eta_emultir_ww[2],eta_multir_ww[2],est.dr.ww[2],est_cm[2,],eta_iptw[2,])
names(est_all)<-c("eMultiR_ww","MultiR_ww","DR_ww",
"CM_r","CM_w1","CM_w2",
"IPTW_r","IPTW_w1","IPTW_w2")
est_all
saveRDS(est_all,"/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/research_mingwang/causal/package_results/est_all.rds")
est_all<-readRDS("/Users/chixiang.chen/Library/CloudStorage/OneDrive-UniversityofMarylandSchoolofMedicine/research_mingwang/causal/package_results/est_all.rds")
data.bar<-data.frame(Bias=abs(round(est_all-casual_effect,3)),
Method=names(est_all))
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias),vjust=1.6, color="white", size=3.5)+
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=0.5))
p
devtools::document()
devtools::document()
rm(list = c("ar1_cor", "dr.est", "est.fct.or", "iptw.binary", "lambda_propensity", "MinBo.one", "multir.est", "multir.ib.est", "multir.propensity.or", "R0der", "R1der", "R2der", "v", "wgeef", "wgeef_oracle"))
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?geese
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_pkgdown()
pkgdown::build_site()
est_all<-readRDSFromWeb("https://github.com/chencxxy28/eMultiR/raw/main/vignettes/data/est_all.rds")
data.bar<-data.frame(Bias=abs(round(est_all-casual_effect,3)),
Method=names(est_all))
p<-ggplot(data=data.bar, aes(x=Method, y=Bias)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=Bias),vjust=1.6, color="white", size=3.5)+
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=0.5))
p
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
dim(x_reg)
time
proportion
id
dist
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
#######regression model
#fit correct model
data.used.reg<-data.frame(x_reg[,-1],trt_a,x_reg[,-1]*trt_a)
names(data.used.reg)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
fit<-glm(yy~x1+x2+x3+trt+x1trt+x2trt+x3trt,family = binomial(link = "logit"),data=data.used.reg)
pseudo_y.obs<-predict(fit,type ="response")
newdata.trt1<-data.frame(x_reg[,-1],1,x_reg[,-1]*1)
names(newdata.trt1)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt1.right<-predict(fit,newdata.trt1,type ="response")
newdata.trt0<-data.frame(x_reg[,-1],0,x_reg[,-1]*0)
names(newdata.trt0)<-c("x1","x2","x3","trt","x1trt","x2trt","x3trt")
pseudo_y.trt0.right<-predict(fit,newdata.trt0,type ="response")
data.impute<-data.frame(pseudo_y=c(pseudo_y.trt1.right,pseudo_y.trt0.right),
trt=c(rep(1,length(pseudo_y.trt1.right)),
rep(0,length(pseudo_y.trt0.right))))
#or
fit<-glm(pseudo_y~trt,family = gaussian(link = "logit"),data=data.impute)
fit
summary(fit)
summary(fit$fitted.values)
fit$linear.predictors
summary(fit$linear.predictors)
(1+exp(-summary(fit$linear.predictors)))^(-1)
summary(fit$fitted.values)
usethis::use_github_action_check_standard()
pkgdown::build_site()
